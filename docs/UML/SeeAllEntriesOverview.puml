@startuml
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

participant "Logic" as app
participant "commandArguments:HashMap" as map
participant "DateParser" as parser
participant "SeeAllExpensesCommand" as expense
participant "SeeAllIncomesCommand" as income
participant "SeeAllEntriesCommand" as all
participant "FinancialList" as list

' Get values from HashMap
app -> map : get command arguments

' Check for blank dates
opt invalid entries for start/end date
    <- app : throw FinanceBuddyException
end

' Parse dates
alt start date != null
    app -> parser : parse start date
    parser --> app : startDate
    else
        app -> app : startDate = null
end

alt end date != null
    app -> parser : parse end date
    parser --> app : endDate
    else
        app -> app : endDate = null
end

' Command execution based on type
alt type != null
    alt type equals "expense"
        app -> expense ** : SeeAllExpensesCommand(startDate, endDate)
        app -> expense : execute(financialList)
        expense -> list : interact
    else type equals "income"
        app -> income ** : SeeAllIncomesCommand(startDate, endDate)
        app -> income : execute(financialList)
        income -> list : interact
    else unknown type
        app -> app : print "Unknown argument"
    end
else type == null
    app -> all ** : SeeAllEntriesCommand(startDate, endDate)
    app -> all : execute(financialList)
    all -> list : interact
end
@enduml